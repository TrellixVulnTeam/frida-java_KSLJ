/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yd.swig;

public final class GIOErrorEnum {
  public final static GIOErrorEnum G_IO_ERROR_FAILED = new GIOErrorEnum("G_IO_ERROR_FAILED");
  public final static GIOErrorEnum G_IO_ERROR_NOT_FOUND = new GIOErrorEnum("G_IO_ERROR_NOT_FOUND");
  public final static GIOErrorEnum G_IO_ERROR_EXISTS = new GIOErrorEnum("G_IO_ERROR_EXISTS");
  public final static GIOErrorEnum G_IO_ERROR_IS_DIRECTORY = new GIOErrorEnum("G_IO_ERROR_IS_DIRECTORY");
  public final static GIOErrorEnum G_IO_ERROR_NOT_DIRECTORY = new GIOErrorEnum("G_IO_ERROR_NOT_DIRECTORY");
  public final static GIOErrorEnum G_IO_ERROR_NOT_EMPTY = new GIOErrorEnum("G_IO_ERROR_NOT_EMPTY");
  public final static GIOErrorEnum G_IO_ERROR_NOT_REGULAR_FILE = new GIOErrorEnum("G_IO_ERROR_NOT_REGULAR_FILE");
  public final static GIOErrorEnum G_IO_ERROR_NOT_SYMBOLIC_LINK = new GIOErrorEnum("G_IO_ERROR_NOT_SYMBOLIC_LINK");
  public final static GIOErrorEnum G_IO_ERROR_NOT_MOUNTABLE_FILE = new GIOErrorEnum("G_IO_ERROR_NOT_MOUNTABLE_FILE");
  public final static GIOErrorEnum G_IO_ERROR_FILENAME_TOO_LONG = new GIOErrorEnum("G_IO_ERROR_FILENAME_TOO_LONG");
  public final static GIOErrorEnum G_IO_ERROR_INVALID_FILENAME = new GIOErrorEnum("G_IO_ERROR_INVALID_FILENAME");
  public final static GIOErrorEnum G_IO_ERROR_TOO_MANY_LINKS = new GIOErrorEnum("G_IO_ERROR_TOO_MANY_LINKS");
  public final static GIOErrorEnum G_IO_ERROR_NO_SPACE = new GIOErrorEnum("G_IO_ERROR_NO_SPACE");
  public final static GIOErrorEnum G_IO_ERROR_INVALID_ARGUMENT = new GIOErrorEnum("G_IO_ERROR_INVALID_ARGUMENT");
  public final static GIOErrorEnum G_IO_ERROR_PERMISSION_DENIED = new GIOErrorEnum("G_IO_ERROR_PERMISSION_DENIED");
  public final static GIOErrorEnum G_IO_ERROR_NOT_SUPPORTED = new GIOErrorEnum("G_IO_ERROR_NOT_SUPPORTED");
  public final static GIOErrorEnum G_IO_ERROR_NOT_MOUNTED = new GIOErrorEnum("G_IO_ERROR_NOT_MOUNTED");
  public final static GIOErrorEnum G_IO_ERROR_ALREADY_MOUNTED = new GIOErrorEnum("G_IO_ERROR_ALREADY_MOUNTED");
  public final static GIOErrorEnum G_IO_ERROR_CLOSED = new GIOErrorEnum("G_IO_ERROR_CLOSED");
  public final static GIOErrorEnum G_IO_ERROR_CANCELLED = new GIOErrorEnum("G_IO_ERROR_CANCELLED");
  public final static GIOErrorEnum G_IO_ERROR_PENDING = new GIOErrorEnum("G_IO_ERROR_PENDING");
  public final static GIOErrorEnum G_IO_ERROR_READ_ONLY = new GIOErrorEnum("G_IO_ERROR_READ_ONLY");
  public final static GIOErrorEnum G_IO_ERROR_CANT_CREATE_BACKUP = new GIOErrorEnum("G_IO_ERROR_CANT_CREATE_BACKUP");
  public final static GIOErrorEnum G_IO_ERROR_WRONG_ETAG = new GIOErrorEnum("G_IO_ERROR_WRONG_ETAG");
  public final static GIOErrorEnum G_IO_ERROR_TIMED_OUT = new GIOErrorEnum("G_IO_ERROR_TIMED_OUT");
  public final static GIOErrorEnum G_IO_ERROR_WOULD_RECURSE = new GIOErrorEnum("G_IO_ERROR_WOULD_RECURSE");
  public final static GIOErrorEnum G_IO_ERROR_BUSY = new GIOErrorEnum("G_IO_ERROR_BUSY");
  public final static GIOErrorEnum G_IO_ERROR_WOULD_BLOCK = new GIOErrorEnum("G_IO_ERROR_WOULD_BLOCK");
  public final static GIOErrorEnum G_IO_ERROR_HOST_NOT_FOUND = new GIOErrorEnum("G_IO_ERROR_HOST_NOT_FOUND");
  public final static GIOErrorEnum G_IO_ERROR_WOULD_MERGE = new GIOErrorEnum("G_IO_ERROR_WOULD_MERGE");
  public final static GIOErrorEnum G_IO_ERROR_FAILED_HANDLED = new GIOErrorEnum("G_IO_ERROR_FAILED_HANDLED");
  public final static GIOErrorEnum G_IO_ERROR_TOO_MANY_OPEN_FILES = new GIOErrorEnum("G_IO_ERROR_TOO_MANY_OPEN_FILES");
  public final static GIOErrorEnum G_IO_ERROR_NOT_INITIALIZED = new GIOErrorEnum("G_IO_ERROR_NOT_INITIALIZED");
  public final static GIOErrorEnum G_IO_ERROR_ADDRESS_IN_USE = new GIOErrorEnum("G_IO_ERROR_ADDRESS_IN_USE");
  public final static GIOErrorEnum G_IO_ERROR_PARTIAL_INPUT = new GIOErrorEnum("G_IO_ERROR_PARTIAL_INPUT");
  public final static GIOErrorEnum G_IO_ERROR_INVALID_DATA = new GIOErrorEnum("G_IO_ERROR_INVALID_DATA");
  public final static GIOErrorEnum G_IO_ERROR_DBUS_ERROR = new GIOErrorEnum("G_IO_ERROR_DBUS_ERROR");
  public final static GIOErrorEnum G_IO_ERROR_HOST_UNREACHABLE = new GIOErrorEnum("G_IO_ERROR_HOST_UNREACHABLE");
  public final static GIOErrorEnum G_IO_ERROR_NETWORK_UNREACHABLE = new GIOErrorEnum("G_IO_ERROR_NETWORK_UNREACHABLE");
  public final static GIOErrorEnum G_IO_ERROR_CONNECTION_REFUSED = new GIOErrorEnum("G_IO_ERROR_CONNECTION_REFUSED");
  public final static GIOErrorEnum G_IO_ERROR_PROXY_FAILED = new GIOErrorEnum("G_IO_ERROR_PROXY_FAILED");
  public final static GIOErrorEnum G_IO_ERROR_PROXY_AUTH_FAILED = new GIOErrorEnum("G_IO_ERROR_PROXY_AUTH_FAILED");
  public final static GIOErrorEnum G_IO_ERROR_PROXY_NEED_AUTH = new GIOErrorEnum("G_IO_ERROR_PROXY_NEED_AUTH");
  public final static GIOErrorEnum G_IO_ERROR_PROXY_NOT_ALLOWED = new GIOErrorEnum("G_IO_ERROR_PROXY_NOT_ALLOWED");
  public final static GIOErrorEnum G_IO_ERROR_BROKEN_PIPE = new GIOErrorEnum("G_IO_ERROR_BROKEN_PIPE");
  public final static GIOErrorEnum G_IO_ERROR_CONNECTION_CLOSED = new GIOErrorEnum("G_IO_ERROR_CONNECTION_CLOSED", fridacoreJNI.G_IO_ERROR_CONNECTION_CLOSED_get());
  public final static GIOErrorEnum G_IO_ERROR_NOT_CONNECTED = new GIOErrorEnum("G_IO_ERROR_NOT_CONNECTED");
  public final static GIOErrorEnum G_IO_ERROR_MESSAGE_TOO_LARGE = new GIOErrorEnum("G_IO_ERROR_MESSAGE_TOO_LARGE");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static GIOErrorEnum swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + GIOErrorEnum.class + " with value " + swigValue);
  }

  private GIOErrorEnum(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private GIOErrorEnum(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private GIOErrorEnum(String swigName, GIOErrorEnum swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static GIOErrorEnum[] swigValues = { G_IO_ERROR_FAILED, G_IO_ERROR_NOT_FOUND, G_IO_ERROR_EXISTS, G_IO_ERROR_IS_DIRECTORY, G_IO_ERROR_NOT_DIRECTORY, G_IO_ERROR_NOT_EMPTY, G_IO_ERROR_NOT_REGULAR_FILE, G_IO_ERROR_NOT_SYMBOLIC_LINK, G_IO_ERROR_NOT_MOUNTABLE_FILE, G_IO_ERROR_FILENAME_TOO_LONG, G_IO_ERROR_INVALID_FILENAME, G_IO_ERROR_TOO_MANY_LINKS, G_IO_ERROR_NO_SPACE, G_IO_ERROR_INVALID_ARGUMENT, G_IO_ERROR_PERMISSION_DENIED, G_IO_ERROR_NOT_SUPPORTED, G_IO_ERROR_NOT_MOUNTED, G_IO_ERROR_ALREADY_MOUNTED, G_IO_ERROR_CLOSED, G_IO_ERROR_CANCELLED, G_IO_ERROR_PENDING, G_IO_ERROR_READ_ONLY, G_IO_ERROR_CANT_CREATE_BACKUP, G_IO_ERROR_WRONG_ETAG, G_IO_ERROR_TIMED_OUT, G_IO_ERROR_WOULD_RECURSE, G_IO_ERROR_BUSY, G_IO_ERROR_WOULD_BLOCK, G_IO_ERROR_HOST_NOT_FOUND, G_IO_ERROR_WOULD_MERGE, G_IO_ERROR_FAILED_HANDLED, G_IO_ERROR_TOO_MANY_OPEN_FILES, G_IO_ERROR_NOT_INITIALIZED, G_IO_ERROR_ADDRESS_IN_USE, G_IO_ERROR_PARTIAL_INPUT, G_IO_ERROR_INVALID_DATA, G_IO_ERROR_DBUS_ERROR, G_IO_ERROR_HOST_UNREACHABLE, G_IO_ERROR_NETWORK_UNREACHABLE, G_IO_ERROR_CONNECTION_REFUSED, G_IO_ERROR_PROXY_FAILED, G_IO_ERROR_PROXY_AUTH_FAILED, G_IO_ERROR_PROXY_NEED_AUTH, G_IO_ERROR_PROXY_NOT_ALLOWED, G_IO_ERROR_BROKEN_PIPE, G_IO_ERROR_CONNECTION_CLOSED, G_IO_ERROR_NOT_CONNECTED, G_IO_ERROR_MESSAGE_TOO_LARGE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

