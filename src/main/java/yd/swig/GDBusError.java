/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yd.swig;

public final class GDBusError {
  public final static GDBusError G_DBUS_ERROR_FAILED = new GDBusError("G_DBUS_ERROR_FAILED");
  public final static GDBusError G_DBUS_ERROR_NO_MEMORY = new GDBusError("G_DBUS_ERROR_NO_MEMORY");
  public final static GDBusError G_DBUS_ERROR_SERVICE_UNKNOWN = new GDBusError("G_DBUS_ERROR_SERVICE_UNKNOWN");
  public final static GDBusError G_DBUS_ERROR_NAME_HAS_NO_OWNER = new GDBusError("G_DBUS_ERROR_NAME_HAS_NO_OWNER");
  public final static GDBusError G_DBUS_ERROR_NO_REPLY = new GDBusError("G_DBUS_ERROR_NO_REPLY");
  public final static GDBusError G_DBUS_ERROR_IO_ERROR = new GDBusError("G_DBUS_ERROR_IO_ERROR");
  public final static GDBusError G_DBUS_ERROR_BAD_ADDRESS = new GDBusError("G_DBUS_ERROR_BAD_ADDRESS");
  public final static GDBusError G_DBUS_ERROR_NOT_SUPPORTED = new GDBusError("G_DBUS_ERROR_NOT_SUPPORTED");
  public final static GDBusError G_DBUS_ERROR_LIMITS_EXCEEDED = new GDBusError("G_DBUS_ERROR_LIMITS_EXCEEDED");
  public final static GDBusError G_DBUS_ERROR_ACCESS_DENIED = new GDBusError("G_DBUS_ERROR_ACCESS_DENIED");
  public final static GDBusError G_DBUS_ERROR_AUTH_FAILED = new GDBusError("G_DBUS_ERROR_AUTH_FAILED");
  public final static GDBusError G_DBUS_ERROR_NO_SERVER = new GDBusError("G_DBUS_ERROR_NO_SERVER");
  public final static GDBusError G_DBUS_ERROR_TIMEOUT = new GDBusError("G_DBUS_ERROR_TIMEOUT");
  public final static GDBusError G_DBUS_ERROR_NO_NETWORK = new GDBusError("G_DBUS_ERROR_NO_NETWORK");
  public final static GDBusError G_DBUS_ERROR_ADDRESS_IN_USE = new GDBusError("G_DBUS_ERROR_ADDRESS_IN_USE");
  public final static GDBusError G_DBUS_ERROR_DISCONNECTED = new GDBusError("G_DBUS_ERROR_DISCONNECTED");
  public final static GDBusError G_DBUS_ERROR_INVALID_ARGS = new GDBusError("G_DBUS_ERROR_INVALID_ARGS");
  public final static GDBusError G_DBUS_ERROR_FILE_NOT_FOUND = new GDBusError("G_DBUS_ERROR_FILE_NOT_FOUND");
  public final static GDBusError G_DBUS_ERROR_FILE_EXISTS = new GDBusError("G_DBUS_ERROR_FILE_EXISTS");
  public final static GDBusError G_DBUS_ERROR_UNKNOWN_METHOD = new GDBusError("G_DBUS_ERROR_UNKNOWN_METHOD");
  public final static GDBusError G_DBUS_ERROR_TIMED_OUT = new GDBusError("G_DBUS_ERROR_TIMED_OUT");
  public final static GDBusError G_DBUS_ERROR_MATCH_RULE_NOT_FOUND = new GDBusError("G_DBUS_ERROR_MATCH_RULE_NOT_FOUND");
  public final static GDBusError G_DBUS_ERROR_MATCH_RULE_INVALID = new GDBusError("G_DBUS_ERROR_MATCH_RULE_INVALID");
  public final static GDBusError G_DBUS_ERROR_SPAWN_EXEC_FAILED = new GDBusError("G_DBUS_ERROR_SPAWN_EXEC_FAILED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_FORK_FAILED = new GDBusError("G_DBUS_ERROR_SPAWN_FORK_FAILED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_CHILD_EXITED = new GDBusError("G_DBUS_ERROR_SPAWN_CHILD_EXITED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_CHILD_SIGNALED = new GDBusError("G_DBUS_ERROR_SPAWN_CHILD_SIGNALED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_FAILED = new GDBusError("G_DBUS_ERROR_SPAWN_FAILED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_SETUP_FAILED = new GDBusError("G_DBUS_ERROR_SPAWN_SETUP_FAILED");
  public final static GDBusError G_DBUS_ERROR_SPAWN_CONFIG_INVALID = new GDBusError("G_DBUS_ERROR_SPAWN_CONFIG_INVALID");
  public final static GDBusError G_DBUS_ERROR_SPAWN_SERVICE_INVALID = new GDBusError("G_DBUS_ERROR_SPAWN_SERVICE_INVALID");
  public final static GDBusError G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = new GDBusError("G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND");
  public final static GDBusError G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = new GDBusError("G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID");
  public final static GDBusError G_DBUS_ERROR_SPAWN_FILE_INVALID = new GDBusError("G_DBUS_ERROR_SPAWN_FILE_INVALID");
  public final static GDBusError G_DBUS_ERROR_SPAWN_NO_MEMORY = new GDBusError("G_DBUS_ERROR_SPAWN_NO_MEMORY");
  public final static GDBusError G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = new GDBusError("G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN");
  public final static GDBusError G_DBUS_ERROR_INVALID_SIGNATURE = new GDBusError("G_DBUS_ERROR_INVALID_SIGNATURE");
  public final static GDBusError G_DBUS_ERROR_INVALID_FILE_CONTENT = new GDBusError("G_DBUS_ERROR_INVALID_FILE_CONTENT");
  public final static GDBusError G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = new GDBusError("G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN");
  public final static GDBusError G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = new GDBusError("G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN");
  public final static GDBusError G_DBUS_ERROR_OBJECT_PATH_IN_USE = new GDBusError("G_DBUS_ERROR_OBJECT_PATH_IN_USE");
  public final static GDBusError G_DBUS_ERROR_UNKNOWN_OBJECT = new GDBusError("G_DBUS_ERROR_UNKNOWN_OBJECT");
  public final static GDBusError G_DBUS_ERROR_UNKNOWN_INTERFACE = new GDBusError("G_DBUS_ERROR_UNKNOWN_INTERFACE");
  public final static GDBusError G_DBUS_ERROR_UNKNOWN_PROPERTY = new GDBusError("G_DBUS_ERROR_UNKNOWN_PROPERTY");
  public final static GDBusError G_DBUS_ERROR_PROPERTY_READ_ONLY = new GDBusError("G_DBUS_ERROR_PROPERTY_READ_ONLY");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static GDBusError swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + GDBusError.class + " with value " + swigValue);
  }

  private GDBusError(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private GDBusError(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private GDBusError(String swigName, GDBusError swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static GDBusError[] swigValues = { G_DBUS_ERROR_FAILED, G_DBUS_ERROR_NO_MEMORY, G_DBUS_ERROR_SERVICE_UNKNOWN, G_DBUS_ERROR_NAME_HAS_NO_OWNER, G_DBUS_ERROR_NO_REPLY, G_DBUS_ERROR_IO_ERROR, G_DBUS_ERROR_BAD_ADDRESS, G_DBUS_ERROR_NOT_SUPPORTED, G_DBUS_ERROR_LIMITS_EXCEEDED, G_DBUS_ERROR_ACCESS_DENIED, G_DBUS_ERROR_AUTH_FAILED, G_DBUS_ERROR_NO_SERVER, G_DBUS_ERROR_TIMEOUT, G_DBUS_ERROR_NO_NETWORK, G_DBUS_ERROR_ADDRESS_IN_USE, G_DBUS_ERROR_DISCONNECTED, G_DBUS_ERROR_INVALID_ARGS, G_DBUS_ERROR_FILE_NOT_FOUND, G_DBUS_ERROR_FILE_EXISTS, G_DBUS_ERROR_UNKNOWN_METHOD, G_DBUS_ERROR_TIMED_OUT, G_DBUS_ERROR_MATCH_RULE_NOT_FOUND, G_DBUS_ERROR_MATCH_RULE_INVALID, G_DBUS_ERROR_SPAWN_EXEC_FAILED, G_DBUS_ERROR_SPAWN_FORK_FAILED, G_DBUS_ERROR_SPAWN_CHILD_EXITED, G_DBUS_ERROR_SPAWN_CHILD_SIGNALED, G_DBUS_ERROR_SPAWN_FAILED, G_DBUS_ERROR_SPAWN_SETUP_FAILED, G_DBUS_ERROR_SPAWN_CONFIG_INVALID, G_DBUS_ERROR_SPAWN_SERVICE_INVALID, G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND, G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID, G_DBUS_ERROR_SPAWN_FILE_INVALID, G_DBUS_ERROR_SPAWN_NO_MEMORY, G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN, G_DBUS_ERROR_INVALID_SIGNATURE, G_DBUS_ERROR_INVALID_FILE_CONTENT, G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN, G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN, G_DBUS_ERROR_OBJECT_PATH_IN_USE, G_DBUS_ERROR_UNKNOWN_OBJECT, G_DBUS_ERROR_UNKNOWN_INTERFACE, G_DBUS_ERROR_UNKNOWN_PROPERTY, G_DBUS_ERROR_PROPERTY_READ_ONLY };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

