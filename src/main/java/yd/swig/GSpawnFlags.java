/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package yd.swig;

public final class GSpawnFlags {
  public final static GSpawnFlags G_SPAWN_DEFAULT = new GSpawnFlags("G_SPAWN_DEFAULT", fridacoreJNI.G_SPAWN_DEFAULT_get());
  public final static GSpawnFlags G_SPAWN_LEAVE_DESCRIPTORS_OPEN = new GSpawnFlags("G_SPAWN_LEAVE_DESCRIPTORS_OPEN", fridacoreJNI.G_SPAWN_LEAVE_DESCRIPTORS_OPEN_get());
  public final static GSpawnFlags G_SPAWN_DO_NOT_REAP_CHILD = new GSpawnFlags("G_SPAWN_DO_NOT_REAP_CHILD", fridacoreJNI.G_SPAWN_DO_NOT_REAP_CHILD_get());
  public final static GSpawnFlags G_SPAWN_SEARCH_PATH = new GSpawnFlags("G_SPAWN_SEARCH_PATH", fridacoreJNI.G_SPAWN_SEARCH_PATH_get());
  public final static GSpawnFlags G_SPAWN_STDOUT_TO_DEV_NULL = new GSpawnFlags("G_SPAWN_STDOUT_TO_DEV_NULL", fridacoreJNI.G_SPAWN_STDOUT_TO_DEV_NULL_get());
  public final static GSpawnFlags G_SPAWN_STDERR_TO_DEV_NULL = new GSpawnFlags("G_SPAWN_STDERR_TO_DEV_NULL", fridacoreJNI.G_SPAWN_STDERR_TO_DEV_NULL_get());
  public final static GSpawnFlags G_SPAWN_CHILD_INHERITS_STDIN = new GSpawnFlags("G_SPAWN_CHILD_INHERITS_STDIN", fridacoreJNI.G_SPAWN_CHILD_INHERITS_STDIN_get());
  public final static GSpawnFlags G_SPAWN_FILE_AND_ARGV_ZERO = new GSpawnFlags("G_SPAWN_FILE_AND_ARGV_ZERO", fridacoreJNI.G_SPAWN_FILE_AND_ARGV_ZERO_get());
  public final static GSpawnFlags G_SPAWN_SEARCH_PATH_FROM_ENVP = new GSpawnFlags("G_SPAWN_SEARCH_PATH_FROM_ENVP", fridacoreJNI.G_SPAWN_SEARCH_PATH_FROM_ENVP_get());
  public final static GSpawnFlags G_SPAWN_CLOEXEC_PIPES = new GSpawnFlags("G_SPAWN_CLOEXEC_PIPES", fridacoreJNI.G_SPAWN_CLOEXEC_PIPES_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static GSpawnFlags swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + GSpawnFlags.class + " with value " + swigValue);
  }

  private GSpawnFlags(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private GSpawnFlags(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private GSpawnFlags(String swigName, GSpawnFlags swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static GSpawnFlags[] swigValues = { G_SPAWN_DEFAULT, G_SPAWN_LEAVE_DESCRIPTORS_OPEN, G_SPAWN_DO_NOT_REAP_CHILD, G_SPAWN_SEARCH_PATH, G_SPAWN_STDOUT_TO_DEV_NULL, G_SPAWN_STDERR_TO_DEV_NULL, G_SPAWN_CHILD_INHERITS_STDIN, G_SPAWN_FILE_AND_ARGV_ZERO, G_SPAWN_SEARCH_PATH_FROM_ENVP, G_SPAWN_CLOEXEC_PIPES };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

